<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>main page</title>
    <link rel="stylesheet" href="css\style.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>

<body>

    <div class="main-navbar shadow-sm sticky-top">
        <div class="top-navbar">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-2 my-auto d-none d-sm-none d-md-block d-lg-block">
                        <h5 class="brand-name">garden</h5>
                    </div>
                    <div class="col-md-5 my-auto">
                        <form role="search">
                            <div class="input-group">
                                <input type="search" placeholder="Search your product" class="form-control" />
                                <button class="btn bg-white" type="submit">
                                    <i class="fa fa-search">Search</i>
                                </button>
                            </div>
                        </form>
                    </div>
                    <div class="col-md-5 my-auto">
                        <ul class="nav justify-content-end">

                            <li class="nav-item">
                                <a class="nav-link" href="#">
                                    <i class="fa fa-shopping-cart"></i> Cart (0)
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">
                                    <i class="fa fa-heart"></i> Wishlist (0)
                                </a>
                            </li>
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fa fa-user"></i> Profile
                                </a>
                                <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                    <li><a class="dropdown-item" href="#"><i class="fa-solid fa-user"></i> Profile</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="fas fa-list"></i> My Orders</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="fa fa-heart"></i> My Wishlist</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="fa fa-shopping-cart"></i> My Cart</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="fa fa-sign-out"></i> Logout</a></li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row" id="category-list">

        </div>
    </div>

    <script src="./js/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>

</html>



<!--<div id="userInfo" style="display: none;">
    <p>Добро пожаловать <span id="userName"></span>!</p>
    <input type="button" value="Выйти" id="logOut" />
</div>
<div id="loginForm">
    <h3>Вход на сайт</h3>
    <p>
        <label>Введите email</label><br />
        <input type="email" id="email" />
    </p>
    <p>
        <label>Введите пароль</label><br />
        <input type="password" id="password" />
    </p>
    <input type="submit" id="submitLogin" value="Логин" />
</div>
<p>
    <input type="submit" id="getData" value="Получить данные" />
</p>
<script>
    var tokenKey = "accessToken";
    // при нажатии на кнопку отправки формы идет запрос к /login для получения токена
    document.getElementById("submitLogin").addEventListener("click", async e => {
        e.preventDefault();
        // отправляет запрос и получаем ответ
        const response = await fetch("/login", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                email: document.getElementById("email").value,
                password: document.getElementById("password").value
            })
        });
        // если запрос прошел нормально
        if (response.ok === true) {
            // получаем данные
            const data = await response.json();
            // изменяем содержимое и видимость блоков на странице
            document.getElementById("userName").innerText = data.username;
            document.getElementById("userInfo").style.display = "block";
            document.getElementById("loginForm").style.display = "none";
            // сохраняем в хранилище sessionStorage токен доступа
            sessionStorage.setItem(tokenKey, data.access_token);
        }
        else  // если произошла ошибка, получаем код статуса
            console.log("Status: ", response.status);
    });

    // кнопка для обращения по пути "/data" для получения данных
    document.getElementById("getData").addEventListener("click", async e => {
        e.preventDefault();
        // получаем токен из sessionStorage
        const token = sessionStorage.getItem(tokenKey);
        // отправляем запрос к "/data
        const response = await fetch("/data", {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Authorization": "Bearer " + token  // передача токена в заголовке
            }
        });

        if (response.ok === true) {
            const data = await response.json();
            alert(data.message);
        }
        else
            console.log("Status: ", response.status);
    });

    // условный выход - просто удаляем токен и меняем видимость блоков
    document.getElementById("logOut").addEventListener("click", e => {

        e.preventDefault();
        document.getElementById("userName").innerText = "";
        document.getElementById("userInfo").style.display = "none";
        document.getElementById("loginForm").style.display = "block";
        sessionStorage.removeItem(tokenKey);
    });
</script>-->



<!--<h2>Список товаров</h2>
<div>
    <input type="hidden" id="productId" />
    <p>
        Имя:<br />
        <input id="productName" />
    </p>
    <p>
        category:<br />
        <input id="categoryId" type="number" />
    </p>
    <p>
        description: <br />
        <input id="description" />
    </p>
    <p>
        price: <br />
        <input id="price" type="number" />
    </p>
    <p>
        img: <br />
        <input id="img" />
    </p>
    <p>
        <button id="saveBtn">Сохранить</button>
        <button id="resetBtn">Сбросить</button>
    </p>
</div>
<table>
    <thead><tr><th>Имя</th><th>categoryId</th><th>description</th><th>price</th><th>img</th><th></th></tr></thead>
    <tbody>
    </tbody>
</table>

<script>
    async function getProducts() {
        const response = await fetch("/api/products", {
            method: "GET",
            headers: { "Accept": "application/json" }
        });
        if (response.ok === true) {
            const products = await response.json();
            const rows = document.querySelector("tbody");
            products.forEach(product => rows.append(row(product)));
        }
    }
    async function getProduct(id) {
        const response = await fetch(`/api/products/${id}`, {
            method: "GET",
            headers: { "Accept": "application/json" }
        });
        if (response.ok === true) {
            const product = await response.json();
            document.getElementById("productId").value = product.productId;
            document.getElementById("productName").value = product.name;
            document.getElementById("categoryId").value = product.categoryId;
            document.getElementById("description").value = product.description;
            document.getElementById("price").value = product.price;
            document.getElementById("img").value = product.img;
        }
        else {
            const error = await response.json();
            console.log(error.message);
        }
    }
    async function createProduct(productName, productCategoryId, productDescription, productPrice, productImg) {

        const response = await fetch("/api/products", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Name: productName,
                CategoryId: parseInt(productCategoryId, 10),
                Description: productDescription,
                Price: parseInt(productPrice, 10),
                Img: productImg
            })
        });
        if (response.ok === true) {
            const product = await response.json();
            document.querySelector("tbody").append(row(product));
        }
        else {
            const error = await response.json();
            console.log(error.message);
        }
    }
    async function editProduct(productId, productName, productCategoryId, productDescription, productPrice, productImg) {
        const response = await fetch("api/products", {
            method: "PUT",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                ProductId: productId,
                Name: productName,
                CategoryId: parseInt(productCategoryId, 10),
                Description: productDescription,
                Price: productPrice,
                Img: productImg
            })
        });
        if (response.ok === true) {
            const product = await response.json();
            document.querySelector(`tr[data-rowid='${product.productId}']`).replaceWith(row(product));
        }
        else {
            const error = await response.json();
            console.log(error.message);
        }
    }
    async function deleteProduct(id) {
        const response = await fetch(`/api/products/${id}`, {
            method: "DELETE",
            headers: { "Accept": "application/json" }
        });
        if (response.ok === true) {
            const product = await response.json();
            document.querySelector(`tr[data-rowid='${product.productId}']`).remove();
        }
        else {
            const error = await response.json();
            console.log(error.message);
        }
    }

    // сброс данных формы после отправки
    function reset() {
        document.getElementById("productId").value =
            document.getElementById("productName").value =
            document.getElementById("categoryId").value =
            document.getElementById("description").value =
            document.getElementById("price").value =
            document.getElementById("img").value = "";
    }
    // создание строки для таблицы
    function row(product) {

        const tr = document.createElement("tr");
        tr.setAttribute("data-rowid", product.productId);

        const nameTd = document.createElement("td");
        nameTd.append(product.name);
        tr.append(nameTd);

        const categoryTd = document.createElement("td");
        categoryTd.append(product.categoryId);
        tr.append(categoryTd);

        const descriptionTd = document.createElement("td");
        descriptionTd.append(product.description);
        tr.append(descriptionTd);

        const priceTd = document.createElement("td");
        priceTd.append(product.price);
        tr.append(priceTd);

        const imgTd = document.createElement("td");
        imgTd.append(product.img);
        tr.append(imgTd);

        const linksTd = document.createElement("td");

        const editLink = document.createElement("button");
        editLink.append("Изменить");
        editLink.addEventListener("click", async () => {
            await getProduct(product.productId);

        });
        linksTd.append(editLink);

        const removeLink = document.createElement("button");
        removeLink.append("Удалить");
        removeLink.addEventListener("click", async () => await deleteProduct(product.productId));

        linksTd.append(removeLink);
        tr.appendChild(linksTd);

        return tr;
    }
    // сброс значений формы
    document.getElementById("resetBtn").addEventListener("click", () => reset());

    // отправка формы
    document.getElementById("saveBtn").addEventListener("click", async () => {

        const id = document.getElementById("productId").value;
        const name = document.getElementById("productName").value;
        const categoryId = document.getElementById("categoryId").value;
        const description = document.getElementById("description").value;
        const price = document.getElementById("price").value;
        const img = document.getElementById("img").value;
        if (id === "")
            await createProduct(name, categoryId, description, price, img);
        else {
            await editProduct(id, name, categoryId, description, price, img);
            console.log(description);
        }
        reset();
    });

    getProducts();
</script>-->
